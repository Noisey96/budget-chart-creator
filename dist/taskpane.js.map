{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack:///./src/taskpane/taskpane.js?"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license. See LICENSE in the project root for license information.\n*/\n/*\n  Name: John Freeman\n  Date: 6/19/22\n  File: taskpane.js\n  File History: Created on 6/13/22. Edited on 6/17/22 to add in functionality to create the charts. Edited on 6/18/22 to add in functionality to format the chart, refresh the  \n                data, and position the charts. Edited on 6/19/22 to decrease complexity of the code. Edited on 6/20/22 to add in functionality to update limits, handle null \n                limits, handle invalid characters, and handle add/removing item categories.\n*/\n\n// once ready, link the HTML elements to the JavaScript\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    document.getElementById(\"select-month\").onchange = selectMonth;\n    document.getElementById(\"add-update-chart\").onclick = openChartDialog;\n    document.getElementById(\"refresh-charts\").onclick = refreshCharts;\n    document.getElementById(\"edit-item-category-list\").onclick = openItemCategoryListDialog;\n  }\n});\n\n// global variables used to store data needed across different functions\nlet month, categoryColumn, amountColumn, error, charts = 0, itemCategoryList = {\n  active: [\"Charity & Gifts\", \n           \"Cleaning Products & Services\", \n           \"Clothing\",\n           \"Electronics & Software\",\n           \"Entertainment\",\n           \"Food\",\n           \"Furniture & Home Accessories\",\n           \"Housing\",\n           \"Insurance & Loan Payments\",\n           \"Kitchen & Dining\",\n           \"Medical Products & Services\",\n           \"Work Supplies\",\n           \"Other\"],\n  inactive: [],\n}\n\n// function to load in the expense data from the specified month\nasync function selectMonth() {\n  await Excel.run(async (context) => {\n    // translate specified month into its worksheet name\n    let selectElem = document.getElementById(\"select-month\");\n    month = selectElem.options[selectElem.selectedIndex].value;\n    \n    // refresh each chart's name and title using a for-loop to identify each chart\n    let chartSheet = context.workbook.worksheets.getActiveWorksheet();\n    chartSheet.charts.load(\"count\");\n    await context.sync();\n    let chartCount = chartSheet.charts.count;\n    for (let i = 0; i < chartCount; i++) {\n      let chart = chartSheet.charts.getItemAt(i);\n      chart.load(\"name\");\n      let chartTitle = chart.title.load(\"text\");\n      await context.sync();\n\n      // updates each chart's name and title\n      let chartName = chart.name.split(\"_\");\n      chartName[1] = month;\n      chart.name = chartName.join(\"_\");\n      let chartTitleText = chartTitle.text.split(\" \");\n      chartTitleText[chartTitleText.length - 1] = month;\n      chartTitle.text = chartTitleText.join(\" \");\n      await context.sync();\n    }\n\n    // refresh each table and the transaction dependent properties of its relevant chart\n    await refreshCharts();\n  })\n  .catch(handleErrors);\n}\n\n// function to open the dialog for adding an item category\nlet chartDialog = null;\nfunction openChartDialog() {\n  Office.context.ui.displayDialogAsync(\n    'https://localhost:3000/chart.html',\n    {height: 45, width: 55},\n    function (result) {\n      chartDialog = result.value;\n      chartDialog.addEventHandler(Office.EventType.DialogMessageReceived, addUpdateChart);\n    }\n  );\n}\n\n// function to add/update a chart to the active worksheet\nasync function addUpdateChart(arg) {\n  // receives the item category and limit from the dialog\n  let fullCategory = arg.message.split(\"_\")[0];\n  let category = removeInvalidCharacters(fullCategory);\n  let limit = Number(arg.message.split(\"_\")[1]);\n  chartDialog.close();\n\n  await Excel.run(async (context) => {\n    // pull in the transaction data\n    await findTransactionData(context);\n\n    // calculate amount spent and unspent, and whether the user overspent in that item category\n    let [spent, unspent, overspent] = calculateAmounts(category, limit);\n\n    // if this is the first chart, intializes the chart sheet and the table sheet behind it\n    let chartSheet = context.workbook.worksheets.getActiveWorksheet(), tableSheet;\n    if (!charts) {\n      // initializes the chart sheet\n      chartSheet.charts.onAdded.add(repositionCharts);\n      chartSheet.charts.onDeleted.add(repositionCharts);\n\n      // initializes the table sheet behind the chart sheet\n      tableSheet = context.workbook.worksheets.add(\"Tables\");\n      chartSheet.load(\"position\");\n      tableSheet.load(\"position\");\n      await context.sync();\n      tableSheet.position = chartSheet.position + 1;\n      tableSheet.visibility = Excel.SheetVisibility.hidden;\n      await context.sync();\n    }\n\n    // add/update the underlying table and its chart\n    tableSheet = context.workbook.worksheets.getItem(\"Tables\");\n    let table = tableSheet.tables.getItemOrNullObject(category + \"_\" + month);\n    await context.sync();\n    let found = !table.isNullObject;\n    // if relevant table is found, update the table and its chart\n    if (found) {\n      // updates the table\n      table.getDataBodyRange().values = [[spent, unspent]];\n      tableSheet.getUsedRange().format.autofitColumns();\n      tableSheet.getUsedRange().format.autofitRows();\n      await context.sync();\n\n      // updates its chart\n      let chart = chartSheet.charts.getItem(category + \"_\" + month);\n      await dependentChartFormat(context, chart, limit, spent, overspent);\n      await context.sync();\n    }\n    // otherwise, create the table and its chart\n    else {\n      // create the table\n      tableSheet = context.workbook.worksheets.getItem(\"Tables\");\n      let tableRange = tableSheet.getRange(\"A\" + ((charts * 3) + 1) + \":B\" + ((charts * 3) + 2));\n      let nextTable = tableSheet.tables.add(tableRange, true);\n      nextTable.name = category + \"_\" + month;\n      nextTable.getHeaderRowRange().values = [[\"Spent\", \"Unspent\"]];\n      nextTable.getDataBodyRange().values = [[spent, unspent]];\n      tableSheet.getUsedRange().format.autofitColumns();\n      tableSheet.getUsedRange().format.autofitRows();\n      await context.sync();\n\n      // create its chart and format it\n      let chart = chartSheet.charts.add(\"BarStacked\", tableRange, \"Columns\");\n      await independentChartFormat(context, chart, fullCategory, category);\n      await dependentChartFormat(context, chart, limit, spent, overspent);\n      await context.sync();\n      charts++;\n    }\n  })\n  .catch(handleErrors);\n}\n\n// function to refresh each table and the transaction dependent properties of its relevant chart\nasync function refreshCharts() {\n  await Excel.run(async (context) => {\n    // refresh all the tables\n    let tableSheet = context.workbook.worksheets.getItemOrNullObject(\"Tables\");\n    await context.sync();\n    if (!tableSheet.isNullObject) {\n      // if there are pre-existing tables, refresh relevant transaction data behind all the tables\n      await findTransactionData(context);\n\n      // use a for-loop to find each table\n      tableSheet.tables.load(\"count\");\n      await context.sync();\n      let tableCount = tableSheet.tables.count;\n      for (let i = 0; i < tableCount; i++) {\n        let table = tableSheet.tables.getItemAt(i);\n\n        // identify each table's category\n        table.load(\"name\");\n        await context.sync();\n        let category = table.name.split(\"_\")[0];\n\n        // calculate limit, amount spent, amount unspent, and whether the user overspent in that item category\n        let tableData = table.getDataBodyRange().load(\"values\");\n        await context.sync();\n        let amounts = tableData.values;\n        let limit = amounts[0][0] + amounts[0][1];\n        let [spent, unspent, overspent] = calculateAmounts(category, limit);\n\n        // update table\n        tableData.values = [[spent, unspent]];\n        await context.sync();\n\n        // refresh the relevant chart\n        let chartSheet = context.workbook.worksheets.getActiveWorksheet();\n        let chart = chartSheet.charts.getItem(category + \"_\" + month);\n        await dependentChartFormat(context, chart, limit, spent, overspent);\n      }\n    }\n  })\n  .catch(handleErrors);\n}\n\n// function to reposition charts after one is added or deleted\nasync function repositionCharts() {\n  await Excel.run(async (context) => {\n    let chartSheet = context.workbook.worksheets.getActiveWorksheet();\n    chartSheet.charts.load(\"items\");\n    await context.sync();\n\n    let allCharts = chartSheet.charts.items;\n    for (let i = 0; i < allCharts.length; i++) {\n      let chart = allCharts[i];\n      let row = Math.floor(i / 3);\n      let column = i  % 3;\n      chart.left = 10 + (380 * column);\n      chart.top = 10 + (175 * row);\n    }\n  })\n  .catch(handleErrors);\n}\n\n// helper function to pull the relevant transaction data\nasync function findTransactionData(context) {\n  // generate the name to the worksheet with the relevant transaction data\n  let year = new Date().getFullYear();\n  let worksheetName = month + \" \" + year;\n\n  // finds the relevant transaction data\n  let sheet = context.workbook.worksheets.getItem(worksheetName);\n  let expensesTable = sheet.tables.getItem(month);\n  categoryColumn = expensesTable.columns.getItem(\"Item Category\").getDataBodyRange().load(\"values\");\n  amountColumn = expensesTable.columns.getItem(\"Cost\").getDataBodyRange().load(\"values\");\n  await context.sync();\n}\n\n// helper function to calculate amount spent, unspent, and overspent in that item category\nfunction calculateAmounts(category, limit) {\n  // calculate amounts\n  let spent = amountColumn.values.reduce((total, _, i) => {\n    if (removeInvalidCharacters(categoryColumn.values[i][0]) === category) total += amountColumn.values[i][0];\n    return total;\n  }, 0);\n  let unspent = limit - spent, overspent = false;\n  if (unspent < 0) overspent = true;\n\n  // reformats amounts\n  spent = spent.toFixed(2);\n  unspent = unspent.toFixed(2);\n\n  return [spent, unspent, overspent];\n}\n\n// helper function to handle errors\nlet errorDialog = null;\nfunction handleErrors(err) {\n  error = err;\n  Office.context.ui.displayDialogAsync(\n    'https://localhost:3000/error.html',\n    {height: 45, width: 55},\n    function (result) {\n      errorDialog = result.value;\n      errorDialog.addEventHandler(Office.EventType.DialogMessageReceived, sendError);\n    }\n  );\n}\n\n// helper function to send the error to the error dialog\nfunction sendError(arg) {\n  if (arg.message === \"connected\") errorDialog.messageChild(JSON.stringify(error));\n}\n\n// helper function to format the chart's transaction independent properties\nasync function independentChartFormat(context, chart, fullCategory, category) {\n  // format the chrt's size\n  chart.height = 155;\n  chart.width = 360;\n\n  // give the chart a name\n  chart.name = category + \"_\" + month;\n\n  // format the chart's title\n  chart.title.text = fullCategory + \" Spending in \" + month;\n  chart.title.format.font.size = 16;\n  chart.title.format.font.color = \"#000000\";\n\n  // format the chart's legend\n  chart.legend.position = \"bottom\";\n  chart.legend.format.font.size = 10;\n  chart.legend.format.font.color = \"#000000\";\n\n  // format the chart's axes\n  chart.axes.valueAxis.format.font.size = 10;\n  chart.axes.valueAxis.format.font.color = \"#000000\";\n  chart.axes.valueAxis.numberFormat = \"$0.00\";\n  chart.axes.valueAxis.minimum = 0;\n  chart.axes.categoryAxis.visible = false;\n\n  // format the chart's data series\n  chart.series.load(\"items\");\n  await context.sync();\n  for (let i = 0; i < chart.series.items.length; i++) {\n    let bar = chart.series.items[i];\n    // format bar height\n    bar.gapWidth = 0;\n    // format bar data labels\n    bar.dataLabels.showValue = true;\n    bar.dataLabels.numberFormat = \"$0.00\";\n    bar.dataLabels.format.font.size = 12;\n    bar.dataLabels.format.font.color = \"#000000\";\n  }\n  await context.sync();\n}\n\n// helper function to format the chart's transaction dependent properties\nasync function dependentChartFormat(context, chart, limit, spent, overspent) {\n  // format the chart's axes\n  chart.axes.valueAxis.maximum = overspent ? Math.ceil(spent) : limit;\n  chart.axes.valueAxis.majorUnit = limit || Math.ceil(spent);\n\n  // format the chart's data series's colors\n  chart.series.load(\"items\", \"items/name\");\n  await context.sync();\n  for (let i = 0; i < chart.series.items.length; i++) {\n    let bar = chart.series.items[i];\n    if (overspent && bar.name === \"Spent\") bar.format.fill.setSolidColor(\"#FF0000\");\n    else if (bar.name === \"Spent\") bar.format.fill.setSolidColor(\"#0070C0\");\n    else bar.format.fill.setSolidColor(\"#00B050\");\n  }\n  await context.sync();\n}\n\n// helper function to remove invalid characters (for table names)\nfunction removeInvalidCharacters(name) {\n  return name.replace(/[^A-Za-z0-9]/g, \"\");\n}\n\n// function to open the dialog for adding an item category\nlet itemCategoryListDialog = null;\nfunction openItemCategoryListDialog() {\n  Office.context.ui.displayDialogAsync(\n    'https://localhost:3000/chart.html',\n    {height: 45, width: 55},\n    function (result) {\n      itemCategoryListDialog = result.value;\n      itemCategoryListDialog.addEventHandler(Office.EventType.DialogMessageReceived, editCategoryList);\n    }\n  );\n}\n\nfunction editCategoryList(arg) {\n  if (arg.message === \"connected\") itemCategoryListDialog.messageChild(JSON.stringify(itemCategoryList));\n  // else if (arg.message === \"failed\") return null;\n  // else\n}"],"names":["Office","onReady","info","host","HostType","Excel","document","getElementById","style","display","onchange","selectMonth","onclick","openChartDialog","refreshCharts","openItemCategoryListDialog","month","categoryColumn","amountColumn","error","charts","itemCategoryList","active","inactive","run","context","selectElem","options","selectedIndex","value","chartSheet","workbook","worksheets","getActiveWorksheet","load","sync","chartCount","count","i","chart","getItemAt","chartTitle","title","chartName","name","split","join","chartTitleText","text","length","catch","handleErrors","chartDialog","ui","displayDialogAsync","height","width","result","addEventHandler","EventType","DialogMessageReceived","addUpdateChart","arg","fullCategory","message","category","removeInvalidCharacters","limit","Number","close","findTransactionData","calculateAmounts","spent","unspent","overspent","onAdded","add","repositionCharts","onDeleted","tableSheet","position","visibility","SheetVisibility","hidden","getItem","table","tables","getItemOrNullObject","isNullObject","getDataBodyRange","values","getUsedRange","format","autofitColumns","autofitRows","dependentChartFormat","tableRange","getRange","nextTable","getHeaderRowRange","independentChartFormat","tableCount","tableData","amounts","allCharts","items","row","Math","floor","column","left","top","year","Date","getFullYear","worksheetName","sheet","expensesTable","columns","reduce","total","_","toFixed","errorDialog","err","sendError","messageChild","JSON","stringify","font","size","color","legend","axes","valueAxis","numberFormat","minimum","categoryAxis","visible","series","bar","gapWidth","dataLabels","showValue","maximum","ceil","majorUnit","fill","setSolidColor","replace","itemCategoryListDialog","editCategoryList"],"sourceRoot":""}